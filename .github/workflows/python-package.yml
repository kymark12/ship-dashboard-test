name: CI build

on:
  workflow_dispatch:

jobs:
  build:

    env:
      PY_COLORS: "1"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Linux OS cache
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      id: get-cache
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies if not cached
      if: steps.get-cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: install cached dependencies
      run: pip install -r requirements.txt
    - name: Install SeleniumBase
      run: |
        python setup.py install
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are flake8 issues
        flake8 . --count --show-source --statistics --exclude=temp
    - name: Install Chrome
      run: |
        sudo apt install google-chrome-stable
    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase
    - name: Install chromedriver
      run: |
        seleniumbase install chromedriver
    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py
    - name: Run the test
      run: |
       pytest --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
